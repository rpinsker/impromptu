import unittest
import midi
import sys
sys.path.insert(0, '../src')
import os 
from TuneIter2 import *

class TestImpromptuBackend2(unittest.TestCase):
	def TestTunetoJSON(self):
		tune = TuneWrapper("../tests/MIDITestFiles/tune-with-chord-rest-note.mid")
		json_str = TunetoJSON(tune)
		f = open(json_str, 'r')
		l1 = f.readline()
		self.assertEqual(l1, "{\n")
		l2 = f.readline()
		self.assertEqual(l2, '\t"tune":{\n')
		l3 = f.readline()
		self.assertEqual(l3, '\t\t"timeSignature":["4", "8"],\n')
		l4 = f.readline()
		self.assertEqual(l4, '\t\t"clef":"0",\n')
		l5 = f.readline()
		self.assertEqual(l5, '\t\t"title":"",\n')
		l6 = f.readline()
		self.assertEqual(l6, '\t\t"contributors":[],\n')
		l7 = f.readline()
		self.assertEqual(l7, '\t\t"events":[\n')
		l8 = f.readline()
		self.assertEqual(l8, '\t\t\t{\n')
		l9 = f.readline()
		self.assertEqual(l9, '\t\t\t\t"class":"chord"\n')
		l10 = f.readline()
		self.assertEqual(l10, '\t\t\t\t"duration":"",\n')
		l11 = f.readline()
		self.assertEqual(l11, '\t\t\t\t"s_duration":"0.1363635",\n')
		l12 = f.readline()
		self.assertEqual(l12, '\t\t\t\t"frequency":"",\n')
		l13 = f.readline()
		self.assertEqual(l13, '\t\t\t\t"onset":"0"\n')
		l14 = f.readline()
		self.assertEqual(l14, '\t\t\t\t"pitches":[\n')
		l15 = f.readline()
		self.assertEqual(l15, '\t\t\t\t\t{\n')
		l16 = f.readline()
		self.assertEqual(l16, '\t\t\t\t\t"letter":"e",\n')
		l17 = f.readline()
		self.assertEqual(l17, '\t\t\t\t\t"octave":"3",\n')
		l18 = f.readline()
		self.assertEqual(l18, '\t\t\t\t\t"accidental":"0",\n')
		l19 = f.readline()
		self.assertEqual(l19, '\t\t\t\t\t},\n')
		l20 = f.readline()
		self.assertEqual(l20, '\t\t\t\t\t{\n')
		l21 = f.readline()
		self.assertEqual(l21, '\t\t\t\t\t"letter":"g",\n')
		l22 = f.readline()
		self.assertEqual(l22, '\t\t\t\t\t"octave":"3",\n')
		l23 = f.readline()
		self.assertEqual(l23, '\t\t\t\t\t"accidental":"1",\n')
		l24 = f.readline()
		self.assertEqual(l24, '\t\t\t\t\t},\n')	
		l25 = f.readline()
		self.assertEqual(l25, '\t\t\t\t],\n')
		l26 = f.readline()
		self.assertEqual(l26, '\t\t\t},\n')
		l27 = f.readline()
		self.assertEqual(l27, '\t\t\t{\n')
		l28 = f.readline()	
		self.assertEqual(l28, '\t\t\t\t"class":"rest",\n')
		l29 = f.readline()
		self.assertEqual(l29, '\t\t\t\t"duration":"QUARTER",\n')
		l30 = f.readline()
		self.assertEqual(l30, '\t\t\t\t"s_duration":"0.818181",\n')
		l31 = f.readline()
		self.assertEqual(l31, '\t\t\t\t"frequency":"",\n')
		l32 = f.readline()
		self.assertEqual(l32, '\t\t\t\t"onset":"0.272727",\n')
		l33 = f.readline()
		self.assertEqual(l33, '\t\t\t\t"pitch":{\n')
		l34 = f.readline()
		self.assertEqual(l34, '\t\t\t\t\t"letter":"r",\n')
		l35 = f.readline()
		self.assertEqual(l35, '\t\t\t\t\t"octave":"",\n')
		l36 = f.readline()
		self.assertEqual(l36, '\t\t\t\t\t"accidental":"",\n')
		l37 = f.readline()
		self.assertEqual(l37, '\t\t\t\t}\n')
		l38 = f.readline()
		self.assertEqual(l38, '\t\t\t}\n')
		l39 = f.readline()
		self.assertEqual(l39, '\t\t\t{\n')	
		l40 = f.readline()
		self.assertEqual(l40, '\t\t\t\t"class":"note",\n')
		l41 = f.readline()
		self.assertEqual(l41, '\t\t\t\t"duration":"SIXTEENTH",\n')
		l42 = f.readline()
		self.assertEqual(l42, '\t\t\t\t"s_duration":"",\n')
		l43 = f.readline()
		self.assertEqual(l43, '\t\t\t\t"frequency":"",\n')
		l44 = f.readline()
		self.assertEqual(l44, '\t\t\t\t"onset":"1.090908",\n')
		l45 = f.readline()
		self.assertEqual(l45, '\t\t\t\t"pitch":{\n')
		l46 = f.readline()
		self.assertEqual(l46, '\t\t\t\t\t"letter":"a",\n')
		l47 = f.readline()
		self.assertEqual(l47, '\t\t\t\t\t"octave":"3",\n')
		l48 = f.readline()
		self.assertEqual(l48, '\t\t\t\t\t"accidental":"0",\n')
		l49 = f.readline()
		self.assertEqual(l49, '\t\t\t\t}\n')
		l50 = f.readline()
		self.assertEqual(l50, '\t\t\t}\n')
		l51 = f.readline()
		self.assertEqual(l51, '\t\t],\n')
		l52 = f.readline()
		self.assertEqual(l52, '\t\t"keySignature":{\n')
		l53 = f.readline()
		self.assertEqual(l53, '\t\t\t"isMajor":"",\n')
		l54 = f.readline()
		self.assertEqual(l54, '\t\t\t"pitch":{\n')
		l55 = f.readline()
		self.assertEqual(l55, '\t\t\t\t"letter":"",\n')
		l56 = f.readline()
		self.assertEqual(l56, '\t\t\t\t"octave":"",\n')
		l57 = f.readline()
		self.assertEqual(l57, '\t\t\t\t"accidental":"",\n')
		l58 = f.readline()
		self.assertEqual(l58, '\t\t\t}\n')
		l59 = f.readline()
		self.assertEqual(l59, '\t\t}\n')
		l60 = f.readline()
		self.assertEqual(l60, '\t}\n')
		l61 = f.readline()
		self.assertEqual(l61, '}\n')


	def TestJSONtoTune(self):
		# Test a tune with two notes
		tune = JSONtoTune("../tests/MIDITestFiles/tune.json")
		tune_keysig = tune.getKey()
		tune_keysig_pitch = Pitch(letter="b", octave=2, accidental=Accidental.FLAT)
		tune_keysig_key = Key(isMajor=True, pitch=tune_keysig_pitch)
		self.assertTrue(isinstance(tune_keysig, Key))
		self.assertTrue(tune_keysig.keyEqual(tune_keysig_key))

		tune_title = tune.getTitle()
		self.assertEqual(tune_title, "tune title!")

		tune_contributors = tune.getContributors()
		self.assertEqual(len(tune_contributors), 2)
		self.assertEqual(tune_contributors[0], "contributor one")
		self.assertEqual(tune_contributors[1], "contributor two")

		tune_timeSignature = tune.getTimeSignature()
		self.assertEqual(tune_timeSignature, (3, 4))

		self.assertEqual(tune.clef, Clef.TREBLE)

		tune_events = tune.getEventsList()
		pitch1 = Pitch(letter='b', octave=2, accidental=2)
		note1 = Note(duration=Duration.QUARTER, frequency=25.0, onset=5.67, pitch=pitch1)
		pitch2 = Pitch(letter='r')
		note2 = Note(duration=Duration.WHOLE, frequency=105.0, onset=6.67, pitch=pitch2)
		self.assertTrue(note.eventEqual(tune_events[0]))
		self.assertTrue(note.eventEqual(tune_events[1]))
	

if __name__ == '__main__':
	unittest.main()
	suite = unittest.TestLoader().loadTestsFromTestCase(TestImpromptuBackend2)
	unittest.TextTestRunner(verbosity=3).run(suite)